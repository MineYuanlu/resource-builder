#!/usr/bin/python3
import argparse
import fnmatch
import re
import os
import sys
import subprocess
import json
from shutil import rmtree

parser = argparse.ArgumentParser(description="Arg parser")
parser.add_argument('work_dir')
args = parser.parse_args()

if not os.path.exists(args.work_dir):
    print("Working directory %s does not exist!" % args.work_dir)
    sys.exit(-1)

os.chdir(args.work_dir)

if not os.path.exists("resources.json"):
    print("Working directory %s should contain resources.json!" % args.work_dir)
    sys.exit(-1)

headerTemplate = """/**
 * THIS IS AUTOGENERATED HEADER, DO NOT MODIFY
 */

#ifndef %s_EMBEDDED_RESOURCES_H
#define %s_EMBEDDED_RESOURCES_H
#include <cstdint>

namespace ResourceBuilder {
    enum ResourceId {
        %s
    };

    const uint8_t * get_resource_data(ResourceId id);
    uint32_t get_resource_size(ResourceId id);
}
#endif //%s_EMBEDDED_RESOURCES_H
"""
sourceTemplate = """/**
 * THIS IS AUTOGENERATED FILE, DO NOT MODIFY
 */

#include "resource_builder/resources.h"

#ifdef __linux__

%s
const uint8_t* ResourceBuilder::get_resource_data(ResourceBuilder::ResourceId id) {
    uint8_t* starts[] = {%s};
    return starts[id];
}

uint32_t ResourceBuilder::get_resource_size(ResourceBuilder::ResourceId id) {
    uint32_t sizes[] = {%s};
    return sizes[id];
}
#endif

#ifdef _WIN32

#include <Windows.h>
#include <WinUser.h>

const uint8_t* ResourceBuilder::get_resource_data(ResourceBuilder::ResourceId id) {
    static bool is_loaded = false;
    static const char* names[] = {%s};
    static uint8_t* starts[%d];
    
    if(!is_loaded) {
        is_loaded = true;
        
        for(int i = 0; i<%d; ++i) {
            auto info = FindResourceA(nullptr, names[i], RT_RCDATA);
            starts[i] = static_cast<uint8_t*>(LoadResource(nullptr, info));
        }
    }

    return starts[id];
}

uint32_t ResourceBuilder::get_resource_size(ResourceBuilder::ResourceId id) {
    static bool is_loaded = false;
    static const char* names[] = {%s};
    static uint32_t sizes[%d];
    
    if(!is_loaded) {
        is_loaded = true;
        
        for(int i = 0; i<%d; ++i) {
            auto info = FindResourceA(nullptr, names[i], RT_RCDATA);
            sizes[i] = static_cast<uint32_t>(SizeofResource(nullptr, info));
        }
    }
    
    return sizes[id];
}
#endif

"""


def is_resource(filename):
    r = False
    for res in resources:
        if fnmatch.fnmatch(filename, res):
            r = True
            break
    return r


def get_var_name(file):
    return re.sub(r'[^A-Za-z0-9]', '_', file)


def process_resource(file):
    print("Processing %s" % file)

    name = get_var_name(file)
    varNames.append((name, file))


varNames = []

with open("resources.json") as data_file:
    config = json.load(data_file)
    resources = config["resources"]
    output = config["output"]
    project_name = config["project_name"]

    if os.path.exists(output):
        rmtree(output)

    if not os.path.exists(output):
        os.mkdir(output)
    if not os.path.exists(output + "/objs"):
        os.mkdir(output + "/objs")
    if not os.path.exists(output + "/include"):
        os.mkdir(output + "/include")
    if not os.path.exists(output + "/src"):
        os.mkdir(output + "/src")
    if not os.path.exists(output + "/include/resource_builder"):
        os.mkdir(output + "/include/resource_builder")

    for dirName, subdirList, fileList in os.walk("."):
        for f in fileList:
            local_file = dirName + "/" + f
            if is_resource(local_file):
                process_resource(local_file)

    with open("./build/src/win.rc", "w") as winFile:
        for var in varNames:
            winFile.write("%s RCDATA \"./../../%s\"\n" % (var[0], var[1]))
            out_file = "%s/objs/%s.o" % (output, var[0])
            subprocess.call(["objcopy", "-I", "binary", "-O", "elf64-x86-64", "-B", "i386:x86-64", var[1], out_file])
        winFile.close()

    with open("./build/include/resource_builder/resources.h", "w") as header:
        ids = ""
        isFirst = True
        counter = 0
        for var in varNames:
            if not isFirst:
                # for second and other ids add comma, new line and 8 spaces
                ids += ",\n        "
            ids += "RES_%s = %d" % (var[0].upper(), counter)
            counter += 1
            isFirst = False
        header_def = project_name.upper()
        header.write(headerTemplate % (header_def, header_def, ids, header_def))
        header.close()

    with open("./build/src/resources.cpp", "w") as source:
        extern_vars = ""
        starts_arr = ""
        sizes_arr = ""
        names_arr = ""
        counter = 0
        isFirst = True
        for var in varNames:
            counter += 1
            start = "_binary_" + var[0] + "_start"
            end = "_binary_" + var[0] + "_end"
            if not isFirst:
                # spaces are for proper indentation
                starts_arr += ",\n                         "
                sizes_arr += ",\n                        "
                names_arr += ",\n                                  "
            isFirst = False

            extern_vars += "extern uint8_t " + start + ";\n"
            extern_vars += "extern uint8_t " + end + ";\n"
            starts_arr += "&" + start
            names_arr += "\"" + var[0] + "\""
            sizes_arr += "static_cast<uint32_t>(&" + end + " - &" + start + ")"

        source.write(sourceTemplate % (extern_vars, starts_arr, sizes_arr,
                                       names_arr, counter, counter, names_arr, counter, counter))
        source.close()
